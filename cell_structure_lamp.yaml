substitutions:
  device: cell_structure_lamp
  name: Cell Structure Lamp
  update_interval: 10min

esphome:
  name: ${device}
  platform: ESP8266
  board: esp01_1m

<<: !include common/common.yaml
<<: !include common/logger.yaml
<<: !include common/binary_sensor.yaml
<<: !include common/switch.yaml
<<: !include common/sensor.yaml
          
light:
  - platform: neopixelbus
    variant: SK6812
    pin: GPIO2
    num_leds: 6
    type: GRBW
    name: "${name}"
    id: led
    method: ESP8266_UART1 
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
     
      - lambda:
          #Source: https://github.com/Tenn0/ESPHome-RGB-Breathing-Light-Effect/tree/master
          name: RGB Breathing
          update_interval: 0.04s
          lambda: |-
            static int state = 0;
            static int color = 1;
            auto call = id(led).turn_on();
            call.set_transition_length(0);
            if (color == 1){
              call.set_rgb(1.0, 0.0, 0.0);
            } else if (color == 2) {
              call.set_rgb(1.0, 0.5, 0.0);
            } else if (color == 3) {
              call.set_rgb(1.0, 1.0, 0.0);
            } else if (color == 4) {
              call.set_rgb(0.5, 1.0, 0.0);
            } else if (color == 5) {
              call.set_rgb(0.0, 1.0, 0.0);
            } else if (color == 6) {
              call.set_rgb(0.0, 1.0, 0.5);
            } else if (color == 6) {
              call.set_rgb(0.0, 1.0, 1.0);
            } else if (color == 7) {
              call.set_rgb(0.0, 0.5, 1.0);
            } else if (color == 8) {
              call.set_rgb(0.0, 0.0, 1.0);
            } else if (color == 9) {
              call.set_rgb(0.5, 0.0, 1.0);
            } else if (color == 10) {
              call.set_rgb(1.0, 0.0, 1.0);
            } else if (color == 11) {
              call.set_rgb(1.0, 0.0, 0.5);
            }
            
            if (state == 0) 
            {
             call.set_brightness(0.001);
            } else if (state == 1) {
              call.set_brightness(0.05);
            } else if (state == 2) {
              call.set_brightness(0.1);
            } else if (state == 3) {
              call.set_brightness(0.15);
            } else if (state == 4) {
              call.set_brightness(0.2);
            } else if (state == 5) {
              call.set_brightness(0.25);
            } else if (state == 6) {
              call.set_brightness(0.3);
            } else if (state == 7) {
              call.set_brightness(0.35);
            } else if (state == 8) {
              call.set_brightness(0.4);
            } else if (state == 9) {
              call.set_brightness(0.45);
            } else if (state == 10) {
              call.set_brightness(0.5);
            } else if (state == 11) {
              call.set_brightness(0.55);
            } else if (state == 12) {
              call.set_brightness(0.6);
            } else if (state == 13) {
              call.set_brightness(0.65);
            } else if (state == 14) {
              call.set_brightness(0.7);
            } else if (state == 15) {
              call.set_brightness(0.75);
            } else if (state == 16) {
              call.set_brightness(0.8);
            } else if (state == 17) {
              call.set_brightness(0.85);
            } else if (state == 18) {
              call.set_brightness(0.9);
            } else if (state == 19) {
              call.set_brightness(0.95);
            } else if (state == 20) {
              call.set_brightness(1);
            } else if (state == 21) {
              call.set_brightness(0.95);
            } else if (state == 22) {
              call.set_brightness(0.9);
            } else if (state == 23) {
              call.set_brightness(0.85);
            } else if (state == 24) {
              call.set_brightness(0.8);
            } else if (state == 25) {
              call.set_brightness(0.75);
            } else if (state == 26) {
              call.set_brightness(0.7);
            } else if (state == 27) {
              call.set_brightness(0.65);
            } else if (state == 28) {
              call.set_brightness(0.6);
            } else if (state == 29) {
              call.set_brightness(0.55);
            } else if (state == 30) {
              call.set_brightness(0.5);
            } else if (state == 31) {
              call.set_brightness(0.45);
            } else if (state == 32) {
              call.set_brightness(0.4);
            } else if (state == 33) {
              call.set_brightness(0.35);
            } else if (state == 34) {
              call.set_brightness(0.3);
            } else if (state == 35) {
              call.set_brightness(0.25);
            } else if (state == 36) {
              call.set_brightness(0.2);
            } else if (state == 37) {
              call.set_brightness(0.15);
            } else if (state == 38) {
              call.set_brightness(0.1);
            } else if (state == 39) {
              call.set_brightness(0.05);
            } else if (state == 40) {
              call.set_brightness(0.001);
            }
             call.perform();
             state ++;
             if (state == 41){
             state = 0;
             color++;
             }
             if (color == 12)
             color = 1;
      